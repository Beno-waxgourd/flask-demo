diff --git a/flaskr/__init__.py b/flaskr/__init__.py
index de557e7..5c45a9b 100644
--- a/flaskr/__init__.py
+++ b/flaskr/__init__.py
@@ -44,6 +44,6 @@ def create_app(test_config=None):
 
     return app
 
-# if __name__ == '__main__':
-#     app = create_app()
-#     app.run()
\ No newline at end of file
+if __name__ == '__main__':
+    app = create_app()
+    app.run()
diff --git a/flaskr/auth.py b/flaskr/auth.py
index 3c9f780..848d7cd 100644
--- a/flaskr/auth.py
+++ b/flaskr/auth.py
@@ -1,5 +1,6 @@
 import functools
-
+import psycopg2
+import psycopg2.extras
 from flask import (
     Blueprint, flash, g, redirect, render_template, request, session, url_for
 )
@@ -45,14 +46,17 @@ def register():
 
 @bp.route('/login', methods=('GET', 'POST'))
 def login():
+
     if request.method == 'POST':
         username = request.form['username']
         password = request.form['password']
         db = get_db()
-        cursor = db.cursor()
+        cursor = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
         error = None
-        cursor.execute("SELECT * from users WHERE username='" + username + "'AND password='" + password + "'")
-        users = cursor.fetchone()
+        cursor.execute(
+            'SELECT * FROM users WHERE username = %s', (username,)
+        )
+        user = cursor.fetchone()
         # print(username,password,'users:',users)
         # posts = cursor.fetchall()
         # print("posts:",posts)
@@ -61,9 +65,9 @@ def login():
         # user = cursor.fetchone()
         # fetchone() 根据查询返回一个记录行。如果查询没有结果，则返回 None。
 
-        if users is None:
+        if user is None:
             error = 'Incorrect username.'
-        elif not check_password_hash(users[1], password):
+        elif not check_password_hash(user['password'], password):
             # check_password_hash() 以相同的方式哈希提交的 密码并安全的比较哈希值。如果匹配成功，那么密码就是正确的。
             error = 'Incorrect password.'
 
@@ -71,7 +75,7 @@ def login():
             session.clear()
             # session是一个 dict, 它用于储存横跨请求的值。当验证成功后，用户的 id 被储存于一个新的会话中。
             # 会话数据被储存到一个 向浏览器发送的 cookie 中，在后继请求中，浏览器会返回它。
-            session["user_id"] = users[0]
+            session["user_id"] = user['id']
             # session['user_id'] = users['id']
             return redirect(url_for('index'))
 
@@ -89,7 +93,21 @@ def login_required(view):
     def wrapped_view(**kwargs):
         if g.users is None:
             return redirect(url_for('auth.login'))
-
         return view(**kwargs)
 
-    return wrapped_view
\ No newline at end of file
+    return wrapped_view
+
+@bp.before_app_request
+def load_logged_in_user():
+    user_id = session.get('user_id')
+
+    if user_id is None:
+        g.users = None
+    else:
+        db = get_db()
+        cursor = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
+        cursor.execute(
+            'SELECT * FROM users WHERE id = %s', (user_id,)
+        )
+        res = cursor.fetchone()
+        g.users = {"id": res[0]}
diff --git a/flaskr/blog.py b/flaskr/blog.py
index b774b1e..0fa8bb2 100644
--- a/flaskr/blog.py
+++ b/flaskr/blog.py
@@ -1,6 +1,7 @@
 from flask import (
     Blueprint, flash, g, redirect, render_template, request, url_for
 )
+import psycopg2.extras
 from werkzeug.exceptions import abort
 
 from flaskr.auth import login_required
@@ -11,10 +12,10 @@ bp = Blueprint('blog', __name__)
 @bp.route('/')
 def index():
     db = get_db()
-    cursor = db.cursor()
+    cursor = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
     cursor.execute(
         "SELECT p.id, title, body, created, author_id, username "
-        "FROM post p JOIN user u ON p.author_id = u.id "
+        "FROM post p JOIN users u ON p.author_id = u.id "
         "ORDER BY created DESC"
     )
     posts = cursor.fetchall()
@@ -36,7 +37,7 @@ def create():
         else:
             db = get_db()
             cursor = db.cursor()
-            cursor.execute("INSERT INTO post (title, body, author_id) VALUES ('" + title  + "', '" + body + "', " + g.user['id'] + ")")
+            cursor.execute("INSERT INTO post (title, body, author_id) VALUES ('" + title  + "', '" + body + "', " + str(g.users['id']) + ")")
 
             db.commit()
             return redirect(url_for('blog.index'))
@@ -45,8 +46,8 @@ def create():
 
 def get_post(id, check_author=True):
     db = get_db()
-    cursor = db.cursor()
-    cursor.execute("SELECT p.id, title, body, created, author_id, username FROM post p JOIN user u ON p.author_id = u.id WHERE p.id = %d" %(id) )
+    cursor = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
+    cursor.execute("SELECT p.id, title, body, created, author_id, username FROM post p JOIN users u ON p.author_id = u.id WHERE p.id = %d" %(id) )
     post = cursor.fetchone()
 
     if post is None:
@@ -62,7 +63,6 @@ def get_post(id, check_author=True):
 @login_required
 def update(id):
     post = get_post(id)
-
     if request.method == 'POST':
         title = request.form['title']
         body = request.form['body']
@@ -77,9 +77,8 @@ def update(id):
             db = get_db()
             cursor = db.cursor()
             cursor.execute(
-                "UPDATE post SET title = '" + title + "', body = '" + body + "' "
-                "WHERE id = %d" %(id),
-            )
+                "UPDATE post SET title = %s , body = %s WHERE id = %s",
+                (title, body, id))
             db.commit()
             return redirect(url_for('blog.index'))
 
@@ -93,4 +92,4 @@ def delete(id):
     cursor = db.cursor()
     cursor.execute("DELETE FROM post WHERE id = %d" %(id))
     db.commit()
-    return redirect(url_for('blog.index'))
\ No newline at end of file
+    return redirect(url_for('blog.index'))
